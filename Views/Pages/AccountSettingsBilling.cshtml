@{
  ViewData["Title"] = "Account settings - Address";
}

@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
  <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
  <link rel="stylesheet" href="~/vendor/libs/sweetalert2/sweetalert2.css" />
}

@section VendorScripts {
  <script src="~/vendor/libs/select2/select2.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>
  <script src="~/vendor/libs/cleavejs/cleave.js"></script>
  <script src="~/vendor/libs/cleavejs/cleave-phone.js"></script>
  <script src="~/vendor/libs/sweetalert2/sweetalert2.js"></script>
}

@section PageScripts {

  <script src="~/js/services/users-service.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', async function () {
      // Get references to DOM elements
      const addressForm = document.getElementById('addressForm');
      const submitBtn = document.querySelector('button[type="submit"]');
      const alertsContainer = document.getElementById('alerts-container');

      // Get current user ID
      const userId = usersService.getCurrentUserId();
      if (!userId) {
        showError('User is not logged in. Please log in to access this page.');
        disableForm();
        // Redirect to login page after 2 seconds
        setTimeout(() => {
          window.location.href = '/Auth/LoginBasic?returnUrl=/Pages/AccountSettingsBilling';
        }, 2000);
        return;
      }

      // Function to disable form when user is not logged in
      function disableForm() {
        const inputs = addressForm.querySelectorAll('input, button, select');
        inputs.forEach(input => input.disabled = true);
        addressForm.classList.add('opacity-50');
      }

      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'd-flex justify-content-center my-3';
      loadingIndicator.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
      addressForm.parentNode.insertBefore(loadingIndicator, addressForm);
      addressForm.style.display = 'none';

      try {
        // Load existing address
        await loadAddress();

        // Show the form after data is loaded
        addressForm.style.display = 'flex';
        loadingIndicator.remove();

        // Initialize form submission
        addressForm.addEventListener('submit', function (e) {
          e.preventDefault();
          saveAddress();
        });
      } catch (error) {
        console.error('Error initializing address form:', error);
        showError('Error loading address data: ' + error.message);
        loadingIndicator.remove();
        addressForm.style.display = 'flex';
      }

      // Function to save address
      async function saveAddress() {
        try {
          // Show loading
          submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm mr-2"></span> Saving...';
          submitBtn.disabled = true;

          // Get form data
          const addressData = {
            Line1: document.getElementById('addressLine1').value,
            Line2: document.getElementById('addressLine2').value || '',
            City: document.getElementById('city').value,
            State: document.getElementById('state').value,
            ZipCode: document.getElementById('zipCode').value,
            Country: document.getElementById('country').value,
            IsDefault: true
          };

          // Validate required fields
          if (!addressData.Line1 || !addressData.City || !addressData.State || !addressData.ZipCode || !addressData.Country) {
            showError('Please fill in all required fields');
            submitBtn.innerHTML = 'Save changes';
            submitBtn.disabled = false;
            return;
          }

          // Save using service
          const success = await usersService.saveUserAddress(userId, addressData);

          if (success) {
            showSuccess('Address saved successfully!');
          } else {
            showError('Failed to save address');
          }
        } catch (error) {
          console.error('Error saving address:', error);
          showError('Error saving address: ' + error.message);
        } finally {
          // Reset button
          submitBtn.innerHTML = 'Save changes';
          submitBtn.disabled = false;
        }
      }

      // Function to load address
      async function loadAddress() {
        try {
          console.log('Loading address for user:', userId);

          // Wait for Firebase to be fully initialized
          if (!firebaseInitialized) {
            await new Promise(resolve => {
              document.addEventListener('firebase-ready', resolve, { once: true });
            });
          }

          // Get address from service
          const address = await usersService.getUserAddress(userId);
          console.log('Address data loaded:', address);

          if (!address) {
            console.log('No address found for user');
            return;
          }

          // Populate form fields
          document.getElementById('addressLine1').value = address.Line1 || '';
          document.getElementById('addressLine2').value = address.Line2 || '';
          document.getElementById('city').value = address.City || '';
          document.getElementById('state').value = address.State || '';
          document.getElementById('zipCode').value = address.ZipCode || '';

          // Set country dropdown
          const countrySelect = document.getElementById('country');
          if (countrySelect && address.Country) {
            for (let i = 0; i < countrySelect.options.length; i++) {
              if (countrySelect.options[i].value === address.Country) {
                countrySelect.selectedIndex = i;
                break;
              }
            }
          }
        } catch (error) {
          console.error('Error loading address:', error);
          showError('Error loading address: ' + error.message);
          throw error; // Re-throw to be handled by the caller
        }
      }

      // Helper functions for alerts
      function showSuccess(message) {
        const alert = document.createElement('div');
        alert.className = 'alert alert-success alert-dismissible fade show';
        alert.innerHTML = `
                              ${message}
                              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                          `;

        alertsContainer.appendChild(alert);

        // Auto dismiss after 3 seconds
        setTimeout(() => {
          alert.classList.remove('show');
          setTimeout(() => alert.remove(), 150);
        }, 3000);
      }

      function showError(message) {
        const alert = document.createElement('div');
        alert.className = 'alert alert-danger alert-dismissible fade show';
        alert.innerHTML = `
                              ${message}
                              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                          `;

        alertsContainer.appendChild(alert);
      }
    });
  </script>
}

@* ************** Content ************** *@
<div class="row">
  <div class="col-md-12">
    <div id="alerts-container">
      @if (TempData["SuccessMessage"] != null)
      {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          @TempData["SuccessMessage"]
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      }

      @if (TempData["ErrorMessage"] != null)
      {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          @TempData["ErrorMessage"]
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      }
    </div>

    <div class="nav-align-top">
      <ul class="nav nav-pills flex-column flex-md-row mb-6 gap-2 gap-lg-0">
        <li class="nav-item"><a class="nav-link" href="@Url.Action("AccountSettingsSecurity", "Pages")"><i
              class="ti-sm ti ti-users me-1_5"></i> Account</a></li>
        <li class="nav-item"><a class="nav-link"
            href="@Url.Action("AccountSettingsSecurity", "Pages")#security-tab-content"><i
              class="ti-sm ti ti-lock me-1_5"></i> Security</a></li>
        <li class="nav-item"><a class="nav-link active" href="javascript:void(0);"><i
              class="ti-sm ti ti-map-pin me-1_5"></i> Address</a></li>
      </ul>
    </div>

    <div class="card mb-6">
      <!-- Address Management -->
      <h5 class="card-header">Address Management</h5>
      <div class="card-body">
        <form id="addressForm" class="row g-3">
          <div class="col-12">
            <label for="addressLine1" class="form-label">Address Line 1 <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="addressLine1" name="addressLine1" placeholder="1456 Main Street"
              required />
          </div>
          <div class="col-12">
            <label for="addressLine2" class="form-label">Address Line 2 (Optional)</label>
            <input type="text" class="form-control" id="addressLine2" name="addressLine2"
              placeholder="Apartment, suite, unit, building, floor, etc." />
          </div>
          <div class="col-md-6">
            <label for="city" class="form-label">City <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="city" name="city" placeholder="New York" required />
          </div>
          <div class="col-md-6">
            <label for="state" class="form-label">State <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="state" name="state" placeholder="NY" required />
          </div>
          <div class="col-md-6">
            <label for="zipCode" class="form-label">Zip Code <span class="text-danger">*</span></label>
            <input type="text" class="form-control zip-code" id="zipCode" name="zipCode" placeholder="1100"
              maxlength="6" required />
          </div>
          <div class="col-md-6">
            <label for="country" class="form-label">Country <span class="text-danger">*</span></label>
            <select id="country" class="form-select select2" name="country" required>
              <option value="LB">USA</option>

            </select>
          </div>
          <div class="col-12 mt-4">
            <button type="submit" class="btn btn-primary me-3">Save changes</button>
            <button type="reset" class="btn btn-label-secondary">Reset</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
