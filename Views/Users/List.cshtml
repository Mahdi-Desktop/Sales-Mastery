@model IEnumerable<AspnetCoreMvcFull.DTO.User>
@using System.Security.Claims

@{
    ViewData["Title"] = "User List - Pages";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
    <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

<!-- Users List Table -->
<div class="card">
    <div class="card-header border-bottom">
        <h5 class="card-title mb-0">Users</h5>
        <div class="d-flex justify-content-between align-items-center row pt-4 gap-4 gap-md-0">
            <div class="col-md-4">
                <button type="button" class="btn btn-primary" data-bs-toggle="offcanvas" data-bs-target="#offcanvasAddUser">
                    <i class="ti ti-plus me-sm-1"></i> <span class="d-none d-sm-inline-block">Add New User</span>
                </button>
            </div>
        </div>
    </div>
    <div class="card-datatable table-responsive">
        <table class="table border-top">
            <thead class="border-top">
                <tr>
                    <th>User</th>
                    <th>Role</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Created At</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    <tr>
                        <td>
                            <div class="d-flex justify-content-start align-items-center user-name">
                                <div class="avatar-wrapper">
                                    <div class="avatar avatar-sm me-4">
                                        @{
                                            var initials = "";
                                            if (!string.IsNullOrEmpty(user.FirstName) && user.FirstName.Length > 0)
                                            {
                                                initials += user.FirstName[0];
                                            }
                                            if (!string.IsNullOrEmpty(user.LastName) && user.LastName.Length > 0)
                                            {
                                                initials += user.LastName[0];
                                            }

                                            var colorClasses = new[] { "bg-label-primary", "bg-label-success", "bg-label-danger", "bg-label-warning", "bg-label-info" };
                                            var colorClass = colorClasses[Math.Abs(user.UserId?.GetHashCode() ?? 0) % colorClasses.Length];
                                        }
                                        <span class="avatar-initial rounded-circle @colorClass">@initials.ToUpper()</span>
                                    </div>
                                </div>
                                <div class="d-flex flex-column">
                                    <a href="@Url.Action("ViewAccount", "Users", new { id = user.UserId })" class="text-heading text-truncate">
                                        <span class="fw-medium">@user.FirstName @user.MiddleName @user.LastName</span>
                                    </a>
                                </div>
                            </div>
                        </td>
                        @* <td>
                            @{
                                var roleIcon = user.Role?.ToLower() switch
                                {
                                    "1" => "ti-device-desktop text-danger",
                                    "2" => "ti-crown text-primary",
                                    "3" => "ti-user text-success",
                                    _ => "ti-user text-secondary"
                                };
                            }
                            <span class="text-truncate d-flex align-items-center text-heading">
                                <i class="ti @roleIcon ti-md me-2"></i>
                                @user.Role
                            </span>
                        </td> *@
                        <td>
                            @{
                                var roleIcon = user.Role?.ToLower() switch
                                {
                                    "1" => "ti-device-desktop text-danger",
                                    "2" => "ti-crown text-primary",
                                    "3" => "ti-user text-success",
                                    _ => "ti-user text-secondary"
                                };

                                string roleName = user.Role switch
                                {
                                    "1" => "Admin",
                                    "2" => "Affiliate",
                                    "3" => "Customer",
                                    _ => "Unknown"
                                };
                            }
                            <span class="text-truncate d-flex align-items-center text-heading">
                                <i class="ti @roleIcon ti-md me-2"></i>
                                @roleName
                            </span>
                        </td>



                        <td>@user.Email</td>
                        <td>@user.PhoneNumber</td>
                        <td>
                            @(user.CreatedAt != null ? user.CreatedAt.ToDateTime().ToString("MMM dd, yyyy") : "")
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <a href="javascript:;" class="btn btn-icon btn-text-secondary waves-effect waves-light rounded-pill"
                                   onclick="deleteUser('@user.UserId')">
                                    <i class="ti ti-trash ti-md"></i>
                                </a>
                                <a href="@Url.Action("ViewAccount", "Users", new { id = user.UserId })"
                                   class="btn btn-icon btn-text-secondary waves-effect waves-light rounded-pill">
                                    <i class="ti ti-eye ti-md"></i>
                                </a>
                                <a href="javascript:;" class="btn btn-icon btn-text-secondary waves-effect waves-light rounded-pill dropdown-toggle hide-arrow"
                                   data-bs-toggle="dropdown">
                                    <i class="ti ti-dots-vertical ti-md"></i>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end m-0">
                                    <a href="javascript:;" class="dropdown-item" onclick="editUser('@user.UserId')">Edit</a>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Offcanvas to add new user -->
    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasAddUser" aria-labelledby="offcanvasAddUserLabel">
        <div class="offcanvas-header border-bottom">
            <h5 id="offcanvasAddUserLabel" class="offcanvas-title">Add User</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body mx-0 flex-grow-0 p-6 h-100">
            <form class="add-new-user pt-0" id="addNewUserForm" method="post" onsubmit="submitUserForm(event)">
                @Html.AntiForgeryToken()
                <div class="mb-6">
                    <label class="form-label" for="add-user-FirstName">First Name</label>
                    <input type="text" class="form-control" id="add-user-FirstName" placeholder="John" name="FirstName" required />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="add-user-MiddleName">Middle Name</label>
                    <input type="text" class="form-control" id="add-user-MiddleName" placeholder="M." name="MiddleName" />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="add-user-LastName">Last Name</label>
                    <input type="text" class="form-control" id="add-user-LastName" placeholder="Doe" name="LastName" required />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="add-user-email">Email</label>
                    <input type="email" id="add-user-email" class="form-control" placeholder="john.doe&#64;example.com" name="Email" required />
                </div>
                <!-- Add Password Field -->
                <div class="mb-6">
                    <label class="form-label" for="add-user-password">Password</label>
                    <div class="input-group input-group-merge">
                        <input type="password" id="add-user-password" class="form-control" placeholder="············" name="Password" required />
                        <span class="input-group-text cursor-pointer"><i class="ti ti-eye-off"></i></span>
                    </div>
                    <div class="form-text">
                        Password should be at least 8 characters
                    </div>
                </div>
                <div class="mb-6">
                    <label class="form-label" for="add-user-PhoneNumber">Phone Number</label>
                    <input type="text" id="add-user-PhoneNumber" class="form-control phone-mask" placeholder="+961 (03) 000 000" name="PhoneNumber" />
                </div>
                <div class="mb-6">
                    <label class="form-label" for="Role">Role</label>
                    <select id="Role" class="select2 form-select" name="Role" required>
                        <option value="">Select</option>
                        <option value="1">Admin</option>
                        <option value="2">Affiliate</option>
                        <option value="3">Customer</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary me-3">Submit</button>
                <button type="reset" class="btn btn-label-danger" data-bs-dismiss="offcanvas">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm" action="@Url.Action("UpdateUser", "Users")" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="edit-user-id" name="UserId">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="edit-user-FirstName">First Name</label>
                                <input type="text" class="form-control" id="edit-user-FirstName" name="FirstName" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="edit-user-MiddleName">Middle Name</label>
                                <input type="text" class="form-control" id="edit-user-MiddleName" name="MiddleName">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="edit-user-LastName">Last Name</label>
                                <input type="text" class="form-control" id="edit-user-LastName" name="LastName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="edit-user-email">Email</label>
                                <input type="email" class="form-control" id="edit-user-email" name="Email" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="edit-user-PhoneNumber">Phone Number</label>
                                <input type="text" class="form-control phone-mask" id="edit-user-PhoneNumber" name="PhoneNumber">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="edit-Role">Role</label>
                            <select id="edit-Role" class="form-select" name="Role" required>
                                <option value="">Select</option>
                                <option value="1">Admin</option>
                                <option value="2">Affiliate</option>
                                <option value="3">Customer</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="edit-verification-password">Enter Password to Confirm Changes</label>
                            <div class="input-group input-group-merge">
                                <input type="password" id="edit-verification-password" class="form-control"
                                       placeholder="············" name="VerificationPassword" required />
                                <span class="input-group-text cursor-pointer toggle-password"><i class="ti ti-eye-off"></i></span>
                            </div>
                            <div class="form-text text-danger" id="password-verification-error"></div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@*     <div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm" action="@Url.Action("UpdateUser", "Users")" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="edit-user-id" name="UserId">
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="edit-user-FirstName">First Name</label>
                                <input type="text" class="form-control" id="edit-user-FirstName" name="FirstName" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="edit-user-MiddleName">Middle Name</label>
                                <input type="text" class="form-control" id="edit-user-MiddleName" name="MiddleName">
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="edit-user-LastName">Last Name</label>
                                <input type="text" class="form-control" id="edit-user-LastName" name="LastName" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="edit-user-email">Email</label>
                                <input type="email" class="form-control" id="edit-user-email" name="Email" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="edit-user-PhoneNumber">Phone Number</label>
                                <input type="text" class="form-control phone-mask" id="edit-user-PhoneNumber" name="PhoneNumber">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="edit-Role">Role</label>
                            <select id="edit-Role" class="form-select" name="Role" required>
                                <option value="">Select</option>
                                <option value="admin">Admin</option>
                                <option value="affiliate">Affiliate</option>
                                <option value="customer">Customer</option>
                            </select>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
 *@
    <!-- Delete User Modal -->
    <div class="modal fade" id="deleteUserModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this user? This action cannot be undone.</p>
                    <form id="deleteUserForm" action="@Url.Action("DeleteUser", "Users")" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="delete-user-id" name="id">
                        <div class="modal-footer">
                            <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

    <script>
        
     document.querySelector('input[name="__RequestVerificationToken"]').value;
   
    function submitUserForm(event) {
      event.preventDefault();

      const form = document.getElementById('addNewUserForm');
      const formData = new FormData(form);

      fetch('@Url.Action("AddUser", "Users")', {
        method: 'POST',
        body: formData,
        headers: {
          'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        }
      })
      .then(response => {
        if (response.ok) {
          window.location.reload();
        } else {
          console.error('Form submission failed');
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    };

          function submitEditUserForm(event) {
        event.preventDefault();

        const form = document.getElementById('editUserForm');
        const formData = new FormData(form);

        fetch('@Url.Action("UpdateUser", "Users")', {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("User updated successfully!");
                window.location.reload(); // Reload to reflect changes
            } else {
                // Show error message if password is incorrect or no changes were made
                document.getElementById("password-verification-error").innerText = data.message;

                if (data.message === "No changes detected." || data.message === "Incorrect password. Changes not saved.") {
                    $('#editUserModal').modal('hide'); // Close modal
                }
            }
        })
        .catch(error => console.error('Error:', error));
    }


        function editUser(userId) {
        // Fetch user data
        fetch(`/Users/GetUser?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch user data');
                }
                return response.json();
            })
            .then(data => {
                // Populate the edit form with user data
                document.getElementById('edit-user-id').value = data.userId;
                document.getElementById('edit-user-FirstName').value = data.firstName || '';
                document.getElementById('edit-user-MiddleName').value = data.middleName || '';
                document.getElementById('edit-user-LastName').value = data.lastName || '';
                document.getElementById('edit-user-email').value = data.email || '';
                document.getElementById('edit-user-PhoneNumber').value = data.phoneNumber || '';

                // Set the role dropdown
                const roleSelect = document.getElementById('edit-Role');
                for (let i = 0; i < roleSelect.options.length; i++) {
                    if (roleSelect.options[i].value === data.role) {
                        roleSelect.selectedIndex = i;
                        break;
                    }
                }

                // Clear any previous error messages
                document.getElementById('password-verification-error').innerText = '';

                // Show the modal
                var editModal = new bootstrap.Modal(document.getElementById('editUserModal'));
                editModal.show();
            })
            .catch(error => {
                console.error('Error fetching user data:', error);
                alert('Failed to load user data. Please try again.');
            });
    }

  
        function deleteUser(userId) {
          document.getElementById('delete-user-id').value = userId;
          var modal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
          modal.show();
        }

        // Initialize phone mask if available
        document.addEventListener('DOMContentLoaded', function() {
          const phoneMaskList = document.querySelectorAll('.phone-mask');
          if (phoneMaskList && window.Cleave) {
            phoneMaskList.forEach(function (phoneMask) {
              new Cleave(phoneMask, {
                phone: true,
                phoneRegionCode: 'LB'
              });
            });
          }
        });
    </script>
