@model AspnetCoreMvcFull.DTO.User

@{
    ViewData["Title"] = "User View - Security";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/sweetalert2/sweetalert2.css" />
    <link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
    <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/sweetalert2/sweetalert2.js"></script>
    <script src="~/vendor/libs/cleavejs/cleave.js"></script>
    <script src="~/vendor/libs/cleavejs/cleave-phone.js"></script>
    <script src="~/vendor/libs/select2/select2.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
    <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>
}

@section PageStyles {
    <link rel="stylesheet" href="~/vendor/css/pages/page-user-view.css" />
}

@section PageScripts {
    <script src="~/js/modal-edit-user.js"></script>
    <script src="~/js/modal-enable-otp.js"></script>
    <script src="~/js/app-user-view.js"></script>
    <script src="~/js/app-user-view-security.js"></script>
}

<div class="row">
    <!-- User Sidebar -->
    <div class="col-xl-4 col-lg-5 order-1 order-md-0">
        <!-- User Card -->
        <div class="card mb-6">
            <div class="card-body pt-12">
                <div class="user-avatar-section">
                    <div class="d-flex align-items-center flex-column">
                        <div class="user-info text-center">
                            <h5>
                                @(string.IsNullOrEmpty(Model.MiddleName)
                                    ? $"{Model.FirstName} {Model.LastName}"
                                    : $"{Model.FirstName} {Model.MiddleName} {Model.LastName}")
                            </h5>
                            <span class="badge bg-label-secondary">@Model.Role</span>
                        </div>
                    </div>
                </div>
                <h5 class="pb-4 border-bottom mb-4">Details</h5>
                <div class="info-container">
                    <ul class="list-unstyled mb-6">
                        <li class="mb-2">
                            <span class="h6">Username:</span>
                            <span>@Model.Email?.Split('@')[0]</span>
                        </li>
                        <li class="mb-2">
                            <span class="h6">Email:</span>
                            <span>@Model.Email</span>
                        </li>
                        <li class="mb-2">
                            <span class="h6">Role:</span>
                            <span>@Model.Role</span>
                        </li>
                        <li class="mb-2">
                            <span class="h6">Contact:</span>
                            <span>@Model.PhoneNumber</span>
                        </li>
                    </ul>
                    <div class="d-flex justify-content-center">
                        <a href="javascript:;" class="btn btn-primary me-4" data-bs-target="#editUser" data-bs-toggle="modal">Edit</a>
                    </div>
                </div>
            </div>
        </div>
        <!-- /User Card -->
    </div>
    <!--/ User Sidebar -->
    <!-- User Content -->
    <div class="col-xl-8 col-lg-7 order-0 order-md-1">
        <!-- User Pills -->
        <div class="nav-align-top mb-4">
            <ul class="nav nav-pills flex-column flex-md-row mb-6 row-gap-2">
                <li class="nav-item"><a class="nav-link" href="@Url.Action("ViewAccount", "Users", new { id = Model.UserId })"><i class="ti ti-user-check me-1_5 ti-sm"></i>Account</a></li>
                <li class="nav-item"><a class="nav-link active" href="javascript:void(0);"><i class="ti ti-lock me-1_5 ti-sm"></i>Security</a></li>
                <li class="nav-item"><a class="nav-link" href="@Url.Action("ViewBilling", "Users", new { id = Model.UserId })"><i class="ti ti-bookmark me-1_5 ti-sm"></i>Billing & Plans</a></li>
            </ul>
        </div>
        <!--/ User Pills -->
        <!-- Change Password -->
        <div class="card mb-6">
            <h5 class="card-header">Change Password</h5>
            <div class="card-body">
                <form id="formChangePassword" method="POST" onsubmit="return false">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="userId" value="@Model.UserId" />
                    <div class="alert alert-warning alert-dismissible" role="alert">
                        <h5 class="alert-heading mb-1">Ensure that these requirements are met</h5>
                        <span>Minimum 8 characters long, uppercase & symbol</span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                    <div class="row gx-6">
                        <div class="mb-4 col-12 col-sm-6 form-password-toggle">
                            <label class="form-label" for="currentPassword">Current Password</label>
                            <div class="input-group input-group-merge">
                                <input class="form-control" type="password" id="currentPassword" name="currentPassword" placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" required />
                                <span class="input-group-text cursor-pointer"><i class="ti ti-eye-off"></i></span>
                            </div>
                        </div>
                        <div class="mb-4 col-12 col-sm-6 form-password-toggle">
                            <label class="form-label" for="newPassword">New Password</label>
                            <div class="input-group input-group-merge">
                                <input class="form-control" type="password" id="newPassword" name="newPassword" placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" required />
                                <span class="input-group-text cursor-pointer"><i class="ti ti-eye-off"></i></span>
                            </div>
                        </div>
                        <div class="mb-4 col-12 col-sm-6 form-password-toggle">
                            <label class="form-label" for="confirmPassword">Confirm New Password</label>
                            <div class="input-group input-group-merge">
                                <input class="form-control" type="password" name="confirmPassword" id="confirmPassword" placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" required />
                                <span class="input-group-text cursor-pointer"><i class="ti ti-eye-off"></i></span>
                            </div>
                        </div>
                        <div>
                            <button type="submit" class="btn btn-primary me-2">Change Password</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <!--/ Change Password -->
    </div>
    <!--/ User Content -->
</div>

<!-- Modal -->
@await Html.PartialAsync("../_Partials/_Modals/ModalEditUser")
@await Html.PartialAsync("../_Partials/_Modals/ModalEnableOtp")

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get the current user ID from the URL
        const userId = '@Model.UserId';

        // Set up form validation for password change
        const formChangePassword = document.getElementById('formChangePassword');

        if (formChangePassword) {
            formChangePassword.addEventListener('submit', function(e) {
                e.preventDefault();

                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const currentPassword = document.getElementById('currentPassword').value;

                if (newPassword !== confirmPassword) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'New passwords do not match.',
                        icon: 'error',
                        customClass: {
                            confirmButton: 'btn btn-primary'
                        },
                        buttonsStyling: false
                    });
                    return;
                }

                // Create form data
                const formData = new FormData();
                formData.append('userId', userId);
                formData.append('newPassword', newPassword);
                formData.append('confirmPassword', confirmPassword);
                formData.append('currentPassword', currentPassword);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                // Send password change request
                fetch('/Users/ChangePassword', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Password changed successfully.',
                            icon: 'success',
                            customClass: {
                                confirmButton: 'btn btn-primary'
                            },
                            buttonsStyling: false
                        });

                        // Clear the form
                        formChangePassword.reset();
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: data.message,
                            icon: 'error',
                            customClass: {
                                confirmButton: 'btn btn-primary'
                            },
                            buttonsStyling: false
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while changing the password.',
                        icon: 'error',
                        customClass: {
                            confirmButton: 'btn btn-primary'
                        },
                        buttonsStyling: false
                    });
                });
            });
        }

        // Toggle password visibility
        const togglePasswordElements = document.querySelectorAll('.input-group-text');
        if (togglePasswordElements) {
            togglePasswordElements.forEach(element => {
                element.addEventListener('click', function() {
                    const input = this.parentNode.querySelector('input');
                    const icon = this.querySelector('i');

                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.classList.remove('ti-eye-off');
                        icon.classList.add('ti-eye');
                    } else {
                        input.type = 'password';
                        icon.classList.remove('ti-eye');
                        icon.classList.add('ti-eye-off');
                    }
                });
            });
        }
    });
</script>
