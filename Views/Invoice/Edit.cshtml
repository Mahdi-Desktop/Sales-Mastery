@model AspnetCoreMvcFull.DTO.Invoice
@{
    ViewData["Title"] = $"Edit Invoice #{Model.InvoiceNumber}";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
    <link rel="stylesheet" href="~/vendor/libs/flatpickr/flatpickr.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/select2/select2.js"></script>
    <script src="~/vendor/libs/flatpickr/flatpickr.js"></script>
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">Invoices /</span> Edit Invoice
    </h4>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Edit Invoice #@Model.InvoiceNumber</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="InvoiceId" />
                        <input type="hidden" asp-for="UserId" />
                        <input type="hidden" asp-for="InvoiceNumber" />
                        <input type="hidden" asp-for="CreatedAt" />

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Status" class="form-label">Status</label>
                                    <select asp-for="Status" class="form-select">
                                        <option value="Draft">Draft</option>
                                        <option value="Pending">Pending</option>
                                        <option value="Paid">Paid</option>
                                        <option value="Overdue">Overdue</option>
                                        <option value="Cancelled">Cancelled</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="TotalAmount" class="form-label">Total Amount</label>
                                    <input asp-for="TotalAmount" class="form-control" type="number" step="0.01" />
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="InvoiceDate" class="form-label">Invoice Date</label>
                                    <input id="invoiceDate" class="form-control flatpickr-date" placeholder="YYYY-MM-DD" />
                                    <input type="hidden" asp-for="InvoiceDate" id="invoiceDateValue" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="DueDate" class="form-label">Due Date</label>
                                    <input id="dueDate" class="form-control flatpickr-date" placeholder="YYYY-MM-DD" />
                                    <input type="hidden" asp-for="DueDate" id="dueDateValue" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label asp-for="Notes" class="form-label">Notes</label>
                            <textarea asp-for="Notes" class="form-control" rows="3"></textarea>
                        </div>

                        <h6 class="mb-3">Invoice Items</h6>
                        <div id="invoiceItems">
                            @if (Model.Items != null && Model.Items.Any())
                            {
                                for (int i = 0; i < Model.Items.Count; i++)
                                {
                                    <div class="row mb-3 invoice-item">
                                        <input type="hidden" name="Items[@i].ProductId" value="@Model.Items[i].ProductId" />

                                        <div class="col-md-3">
                                            <div class="mb-2">
                                                <label class="form-label">Product Name</label>
                                                <input type="text" class="form-control" name="Items[@i].ProductName" value="@Model.Items[i].ProductName" />
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="mb-2">
                                                <label class="form-label">Description</label>
                                                <input type="text" class="form-control" name="Items[@i].Description" value="@Model.Items[i].Description" />
                                            </div>
                                        </div>
                                        <div class="col-md-1">
                                            <div class="mb-2">
                                                <label class="form-label">Quantity</label>
                                                <input type="number" class="form-control item-quantity" name="Items[@i].Quantity" value="@Model.Items[i].Quantity" min="1" step="1" />
                                            </div>
                                        </div>
                                        <div class="col-md-1">
                                            <div class="mb-2">
                                                <label class="form-label">Unit Price</label>
                                                <input type="number" class="form-control item-price" name="Items[@i].UnitPrice" value="@Model.Items[i].UnitPrice" min="0" step="0.01" />
                                            </div>
                                        </div>
                                        <div class="col-md-1">
                                            <div class="mb-2">
                                                <label class="form-label">Discount</label>
                                                <input type="number" class="form-control item-discount" name="Items[@i].Discount" value="@Model.Items[i].Discount" min="0" step="0.01" />
                                            </div>
                                        </div>
                                        <div class="col-md-1">
                                            <div class="mb-2">
                                                <label class="form-label">Tax</label>
                                                <input type="number" class="form-control item-tax" name="Items[@i].Tax" value="@Model.Items[i].Tax" min="0" step="0.01" />
                                            </div>
                                        </div>
                                        <div class="col-md-1">
                                            <div class="mb-2">
                                                <label class="form-label">Total</label>
                                                <input type="number" class="form-control item-total" name="Items[@i].Total" value="@Model.Items[i].Total" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-1">
                                            <div class="mb-2">
                                                <label class="form-label">&nbsp;</label>
                                                <button type="button" class="btn btn-danger d-block remove-item">
                                                    <i class="ti ti-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <div class="mb-4">
                            <button type="button" id="addItemBtn" class="btn btn-info">
                                <i class="ti ti-plus me-1"></i> Add Item
                            </button>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <a asp-action="Details" asp-route-id="@Model.InvoiceId" class="btn btn-secondary">Cancel</a>
                            </div>
                            <div class="col-md-6 text-end">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Offcanvas -->
@await Html.PartialAsync("../_Partials/_Offcanvas/OffcanvasSendInvoice")
@await Html.PartialAsync("../_Partials/_Offcanvas/OffcanvasAddPayment")
<!-- /Offcanvas -->

    <script>
        // Initialize flatpickr date pickers
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial dates from model
            const invoiceDate = new Date(@Model.InvoiceDate.ToDateTime().Ticks / 10000);
            const dueDate = new Date(@Model.DueDate.ToDateTime().Ticks / 10000);
            
            flatpickr('#invoiceDate', {
                dateFormat: 'Y-m-d',
                defaultDate: invoiceDate,
                onChange: function(selectedDates, dateStr) {
                    document.getElementById('invoiceDateValue').value = dateStr;
                }
            });
               flatpickr('#dueDate', {
                dateFormat: 'Y-m-d',
                defaultDate: dueDate,
                onChange: function(selectedDates, dateStr) {
                    document.getElementById('dueDateValue').value = dateStr;
                }
            });

            // Set initial hidden values
            document.getElementById('invoiceDateValue').value = invoiceDate.toISOString();
            document.getElementById('dueDateValue').value = dueDate.toISOString();

            // Initialize item calculations
            setupItemCalculations();

            // Add item button
            document.getElementById('addItemBtn').addEventListener('click', function() {
                addNewItem();
            });

            // Remove item buttons
            setupRemoveItemButtons();
        });

        function setupItemCalculations() {
            const items = document.querySelectorAll('.invoice-item');
            items.forEach(item => {
                const quantityInput = item.querySelector('.item-quantity');
                const priceInput = item.querySelector('.item-price');
                const discountInput = item.querySelector('.item-discount');
                const taxInput = item.querySelector('.item-tax');
                const totalInput = item.querySelector('.item-total');

                [quantityInput, priceInput, discountInput, taxInput].forEach(input => {
                    input.addEventListener('change', function() {
                        calculateItemTotal(item);
                        calculateInvoiceTotal();
                    });
                });
            });
        }

        function calculateItemTotal(item) {
            const quantity = parseFloat(item.querySelector('.item-quantity').value) || 0;
            const price = parseFloat(item.querySelector('.item-price').value) || 0;
            const discount = parseFloat(item.querySelector('.item-discount').value) || 0;
            const tax = parseFloat(item.querySelector('.item-tax').value) || 0;

            const total = (quantity * price) - discount + tax;
            item.querySelector('.item-total').value = total.toFixed(2);
        }

        function calculateInvoiceTotal() {
            const totals = Array.from(document.querySelectorAll('.item-total')).map(input => parseFloat(input.value) || 0);
            const invoiceTotal = totals.reduce((sum, total) => sum + total, 0);
            document.getElementById('TotalAmount').value = invoiceTotal.toFixed(2);
        }

        function addNewItem() {
            const itemsContainer = document.getElementById('invoiceItems');
            const itemCount = itemsContainer.querySelectorAll('.invoice-item').length;

            const newItem = document.createElement('div');
            newItem.className = 'row mb-3 invoice-item';
            newItem.innerHTML = `
                <input type="hidden" name="Items[${itemCount}].ProductId" value="" />

                <div class="col-md-3">
                    <div class="mb-2">
                        <label class="form-label">Product Name</label>
                        <input type="text" class="form-control" name="Items[${itemCount}].ProductName" value="" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-2">
                        <label class="form-label">Description</label>
                        <input type="text" class="form-control" name="Items[${itemCount}].Description" value="" />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="mb-2">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control item-quantity" name="Items[${itemCount}].Quantity" value="1" min="1" step="1" />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="mb-2">
                        <label class="form-label">Unit Price</label>
                        <input type="number" class="form-control item-price" name="Items[${itemCount}].UnitPrice" value="0.00" min="0" step="0.01" />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="mb-2">
                        <label class="form-label">Discount</label>
                        <input type="number" class="form-control item-discount" name="Items[${itemCount}].Discount" value="0.00" min="0" step="0.01" />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="mb-2">
                        <label class="form-label">Tax</label>
                        <input type="number" class="form-control item-tax" name="Items[${itemCount}].Tax" value="0.00" min="0" step="0.01" />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="mb-2">
                        <label class="form-label">Total</label>
                        <input type="number" class="form-control item-total" name="Items[${itemCount}].Total" value="0.00" readonly />
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="mb-2">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-danger d-block remove-item">
                            <i class="ti ti-trash"></i>
                        </button>
                    </div>
                </div>
            `;

            itemsContainer.appendChild(newItem);

            // Setup calculations for the new item
            setupItemCalculations();

            // Setup remove button for the new item
            setupRemoveItemButtons();

            // Calculate initial total for the new item
            calculateItemTotal(newItem);
            calculateInvoiceTotal();
        }

        function setupRemoveItemButtons() {
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function() {
                    const item = this.closest('.invoice-item');
                    item.remove();

                    // Renumber the remaining items
                    renumberItems();

                    // Recalculate invoice total
                    calculateInvoiceTotal();
                });
            });
        }

        function renumberItems() {
            const items = document.querySelectorAll('.invoice-item');
            items.forEach((item, index) => {
                const inputs = item.querySelectorAll('input[name^="Items["]');
                inputs.forEach(input => {
                    const name = input.getAttribute('name');
                    const newName = name.replace(/Items\[\d+\]/, `Items[${index}]`);
                    input.setAttribute('name', newName);
                });
            });
        }
    </script>

