@{
    ViewData["Title"] = "Affiliate Details";
    Layout = "_ContentNavbarLayout";
}

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css" />
    <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css" />
    <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
}

<div class="container-xxl flex-grow-1 container-p-y">
@*     <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">Admin / Affiliates /</span> Affiliate Details
    </h4> *@

    <div class="row">
        <!-- Affiliate Profile Card -->
        <div class="col-12 col-lg-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center flex-column pt-3">
                        <div class="avatar avatar-xl mb-3">
                            <span class="avatar-initial rounded-circle bg-label-primary" id="avatarInitial">A</span>
                        </div>
                        <div class="text-center">
                            <h5 class="mb-1" id="affiliateName">Loading...</h5>
                            <p class="text-muted" id="affiliateEmail">loading@example.com</p>
                            <div>
                                <span class="badge bg-label-primary" id="affiliateStatus">Active</span>
                            </div>
                        </div>
                    </div>
                    <div class="divider my-4">
                        <div class="divider-text">Details</div>
                    </div>
                    <div class="info-container">
                        <ul class="list-unstyled">
                            <li class="mb-2">
                                <span class="fw-semibold me-1">ID:</span>
                                <span id="affiliateId">-</span>
                            </li>
                            <li class="mb-2">
                                <span class="fw-semibold me-1">Full Name:</span>
                                <span id="affiliateFullName">-</span>
                            </li>
                            <li class="mb-2">
                                <span class="fw-semibold me-1">Email:</span>
                                <span id="affiliateEmailDetail">-</span>
                            </li>
                            <li class="mb-2">
                                <span class="fw-semibold me-1">Phone:</span>
                                <span id="affiliatePhone">-</span>
                            </li>
                            <li class="mb-2">
                                <span class="fw-semibold me-1">Registration Date:</span>
                                <span id="registrationDate">-</span>
                            </li>
                        </ul>
                        <div class="d-flex justify-content-center">
                            <button type="button" class="btn btn-primary me-2" id="editAffiliateBtn">
                                <i class="ti ti-edit me-1"></i> Edit
                            </button>
                            <button type="button" class="btn btn-outline-danger" id="deleteAffiliateBtn">
                                <i class="ti ti-trash me-1"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Affiliate Statistics Card -->
        <div class="col-12 col-lg-8 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <h5 class="card-title mb-0">Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4 col-6">
                            <div class="d-flex align-items-center">
                                <div class="badge rounded-pill bg-label-primary me-2">
                                    <i class="ti ti-users ti-sm"></i>
                                </div>
                                <div>
                                    <h6 class="mb-0" id="totalCustomersCount">0</h6>
                                    <small>Customers</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-6">
                            <div class="d-flex align-items-center">
                                <div class="badge rounded-pill bg-label-success me-2">
                                    <i class="ti ti-shopping-cart ti-sm"></i>
                                </div>
                                <div>
                                    <h6 class="mb-0" id="totalOrdersCount">0</h6>
                                    <small>Orders</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-6">
                            <div class="d-flex align-items-center">
                                <div class="badge rounded-pill bg-label-warning me-2">
                                    <i class="ti ti-currency-dollar ti-sm"></i>
                                </div>
                                <div>
                                    <h6 class="mb-0" id="totalCommissionAmount">$0</h6>
                                    <small>Commission</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="divider my-4">
                        <div class="divider-text">Performance</div>
                    </div>

                    <!-- Performance Chart -->
                    <div id="affiliatePerformanceChart" class="mb-4" style="height: 300px;"></div>

                    <div class="divider my-4">
                        <div class="divider-text">Customers</div>
                    </div>

                    <!-- Customers Table -->
                    <div class="table-responsive">
                        <table class="table table-hover" id="affiliateCustomersTable">
                            <thead>
                                <tr>
                                    <th>Customer</th>
                                    <th>Email</th>
                                    <th>Orders</th>
                                    <th>Total Spent</th>
                                    <th>Joined Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="5" class="text-center">Loading customers...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Orders -->
    <div class="row">
        <div class="col-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between">
                    <h5 class="card-title mb-0">Recent Orders</h5>
                    <button class="btn btn-sm btn-outline-primary" id="viewAllOrdersBtn">View All</button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="recentOrdersTable">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Commission</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="6" class="text-center">Loading orders...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Affiliate Modal -->
    <div class="modal fade" id="editAffiliateModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Affiliate</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editAffiliateForm">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="firstName">First Name</label>
                                <input type="text" class="form-control" id="firstName" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label" for="lastName">Last Name</label>
                                <input type="text" class="form-control" id="lastName" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="email">Email</label>
                            <input type="email" class="form-control" id="email" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="phone">Phone Number</label>
                            <input type="text" class="form-control" id="phone">
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="status">Status</label>
                            <select class="form-select" id="status">
                                <option value="Active">Active</option>
                                <option value="Pending">Pending</option>
                                <option value="Suspended">Suspended</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveAffiliateBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Firebase Scripts -->
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>

@section VendorScripts {
    <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
    <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>
}

<!-- Initialize Firebase -->
<script>
    // Pass Firebase configuration from server to client
    window.firebaseConfig = {
        apiKey: "@ViewBag.FirebaseApiKey",
        authDomain: "@ViewBag.FirebaseProjectId" + ".firebaseapp.com",
        projectId: "@ViewBag.FirebaseProjectId",
        storageBucket: "@ViewBag.FirebaseStorageBucket",
        messagingSenderId: "@ViewBag.FirebaseMessagingSenderId",
        appId: "@ViewBag.FirebaseAppId"
    };

    // Set user context for access control
    window.userContext = {
        userId: "@ViewBag.UserId",
        isAdmin: @(ViewBag.IsAdmin == "1" ? "true" : "false"),
        isAffiliate: @(ViewBag.IsAffiliate == "1" ? "true" : "false"),
        isCustomer: @(ViewBag.IsCustomer == "1" ? "true" : "false")
    };

    // Get affiliate ID from URL
    const urlParams = window.location.pathname.split('/');
    const affiliateId = urlParams[urlParams.length - 1];
</script>

<script>
    let db;
    let affiliate;
    let performanceChart;

    document.addEventListener('DOMContentLoaded', function () {
        // Initialize Firebase
        if (typeof firebase === 'undefined') {
            console.error('Firebase SDK not loaded');
            return;
        }

        try {
            if (!firebase.apps.length) {
                firebase.initializeApp(window.firebaseConfig);
            }
            db = firebase.firestore();

            // Load affiliate details
            loadAffiliateDetails(affiliateId);

            // Set up event listeners
            setupEventListeners();
        } catch (error) {
            console.error('Error initializing Firebase:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to connect to database. Please try again later.',
                icon: 'error'
            });
        }
    });

    function setupEventListeners() {
        // Edit affiliate button
        document.getElementById('editAffiliateBtn').addEventListener('click', function() {
            showEditAffiliateModal();
        });

        // Save affiliate button
        document.getElementById('saveAffiliateBtn').addEventListener('click', function() {
            saveAffiliateChanges();
        });

        // Delete affiliate button
        document.getElementById('deleteAffiliateBtn').addEventListener('click', function() {
            confirmDeleteAffiliate();
        });

        // View all orders button
        document.getElementById('viewAllOrdersBtn').addEventListener('click', function() {
            window.location.href = `/Admin/Orders?affiliateId=${affiliateId}`;
        });
    }

    async function loadAffiliateDetails(id) {
        try {
            // Get affiliate details
            const affiliateDoc = await db.collection('users').doc(id).get();

            if (!affiliateDoc.exists) {
                Swal.fire({
                    title: 'Not Found',
                    text: 'Affiliate not found',
                    icon: 'error'
                }).then(() => {
                    window.location.href = '/Admin/Affiliates';
                });
                return;
            }

            affiliate = affiliateDoc.data();
            affiliate.id = affiliateDoc.id;

            // Update profile info
            updateAffiliateProfile(affiliate);

            // Load statistics
            loadAffiliateStatistics(id);

            // Load customers
            loadAffiliateCustomers(id);

            // Load recent orders
            loadRecentOrders(id);

            // Initialize performance chart
            initPerformanceChart(id);
        } catch (error) {
            console.error('Error loading affiliate details:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to load affiliate details',
                icon: 'error'
            });
        }
    }

    function updateAffiliateProfile(affiliate) {
        const firstName = affiliate.FirstName || '';
        const lastName = affiliate.LastName || '';
        const fullName = `${firstName} ${lastName}`.trim() || 'Unknown';

        // Set name and initial
        document.getElementById('affiliateName').textContent = fullName;
        document.getElementById('affiliateFullName').textContent = fullName;
        document.getElementById('avatarInitial').textContent = fullName.charAt(0).toUpperCase();

        // Set other details
        document.getElementById('affiliateId').textContent = affiliate.id;
        document.getElementById('affiliateEmail').textContent = affiliate.Email || 'No email';
        document.getElementById('affiliateEmailDetail').textContent = affiliate.Email || 'No email';
        document.getElementById('affiliatePhone').textContent = affiliate.PhoneNumber || 'No phone';

        // Set status badge
        const status = affiliate.Status || 'Active';
        const statusEl = document.getElementById('affiliateStatus');
        statusEl.textContent = status;

        // Update status badge color
        if (status === 'Active') {
            statusEl.className = 'badge bg-label-success';
        } else if (status === 'Pending') {
            statusEl.className = 'badge bg-label-warning';
        } else if (status === 'Suspended') {
            statusEl.className = 'badge bg-label-danger';
        } else {
            statusEl.className = 'badge bg-label-primary';
        }

        // Set registration date
        const createdAt = affiliate.CreatedAt ? affiliate.CreatedAt.toDate() : null;
        document.getElementById('registrationDate').textContent = createdAt ? formatDate(createdAt) : 'Unknown';
    }

    async function loadAffiliateStatistics(affiliateId) {
        try {
            // Get customers
            const customersSnapshot = await db.collection('users')
                .where('Role', '==', '3') // Role 3 for customers
                .where('ReferenceId', '==', affiliateId)
                .get();

            const customerCount = customersSnapshot.size;
            document.getElementById('totalCustomersCount').textContent = customerCount;

            // Get customer IDs
            const customerIds = customersSnapshot.docs.map(doc => doc.id);

            // Get orders from these customers
            let orderCount = 0;
            let totalRevenue = 0;
            let totalCommission = 0;

            if (customerIds.length > 0) {
                // Process in batches (Firestore "in" query limit is 10)
                const batchSize = 10;

                for (let i = 0; i < customerIds.length; i += batchSize) {
                    const batch = customerIds.slice(i, i + batchSize);

                    if (batch.length === 0) continue;

                    const ordersSnapshot = await db.collection('orders')
                        .where('UserId', 'in', batch)
                        .get();

                    orderCount += ordersSnapshot.size;

                    ordersSnapshot.forEach(doc => {
                        const order = doc.data();
                        totalRevenue += parseFloat(order.TotalAmount || 0);
                        totalCommission += parseFloat(order.Commission || 0);
                    });
                }
            }

            // Also get direct commissions
            try {
                // Try first with 'commissions'
                const commissionsSnapshot = await db.collection('commissions')
                    .where('AffiliateId', '==', affiliateId)
                    .get();

                commissionsSnapshot.forEach(doc => {
                    const commission = doc.data();
                    totalCommission += parseFloat(commission.Amount || 0);
                });
            } catch (err) {
                console.warn('Error with "commissions" collection, trying "commisiond":', err);

                // Try with 'commisiond'
                const commisiondsSnapshot = await db.collection('commisiond')
                    .where('AffiliateId', '==', affiliateId)
                    .get();

                commisiondsSnapshot.forEach(doc => {
                    const commission = doc.data();
                    totalCommission += parseFloat(commission.Amount || 0);
                });
            }

            // Update statistics
            document.getElementById('totalOrdersCount').textContent = orderCount;
            document.getElementById('totalCommissionAmount').textContent = formatCurrency(totalCommission);
        } catch (error) {
            console.error('Error loading affiliate statistics:', error);
        }
    }

    async function loadAffiliateCustomers(affiliateId) {
        const tableBody = document.querySelector('#affiliateCustomersTable tbody');

        try {
            // Get customers
            const customersSnapshot = await db.collection('users')
                .where('Role', '==', '3') // Role 3 for customers
                .where('ReferenceId', '==', affiliateId)
                .get();

            if (customersSnapshot.empty) {
                tableBody.innerHTML = '<tr><td colspan="5" class="text-center">No customers found</td></tr>';
                return;
            }

            // Process customer data
            tableBody.innerHTML = '';
            const customers = [];

            for (const doc of customersSnapshot.docs) {
                const customer = doc.data();
                const customerId = doc.id;

                // Get customer orders
                const ordersSnapshot = await db.collection('orders')
                    .where('UserId', '==', customerId)
                    .get();

                let totalSpent = 0;
                ordersSnapshot.forEach(orderDoc => {
                    const order = orderDoc.data();
                    totalSpent += parseFloat(order.TotalAmount || 0);
                });

                customers.push({
                    id: customerId,
                    name: `${customer.FirstName || ''} ${customer.LastName || ''}`.trim() || 'Unknown',
                    email: customer.Email || 'No email',
                    orderCount: ordersSnapshot.size,
                    totalSpent: totalSpent,
                    createdAt: customer.CreatedAt ? customer.CreatedAt.toDate() : null
                });
            }

            // Sort by total spent (descending)
            customers.sort((a, b) => b.totalSpent - a.totalSpent);

            // Render table
            customers.forEach(customer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="avatar avatar-sm me-2">
                                <span class="avatar-initial rounded-circle bg-label-info">
                                    ${customer.name.charAt(0).toUpperCase()}
                                </span>
                            </div>
                            <div>
                                <a href="/Admin/CustomerDetails/${customer.id}" class="text-body fw-semibold">
                                    ${customer.name}
                                </a>
                            </div>
                        </div>
                    </td>
                    <td>${customer.email}</td>
                    <td>${customer.orderCount}</td>
                    <td>${formatCurrency(customer.totalSpent)}</td>
                    <td>${customer.createdAt ? formatDate(customer.createdAt) : 'Unknown'}</td>
                `;
                tableBody.appendChild(row);
            });

            // Initialize DataTable
            if ($.fn.DataTable) {
                $('#affiliateCustomersTable').DataTable({
                    responsive: true,
                    pageLength: 5,
                    searching: false,
                    paging: true,
                    info: false
                });
            }
        } catch (error) {
            console.error('Error loading affiliate customers:', error);
            tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Error loading customer data</td></tr>';
        }
    }

    async function loadRecentOrders(affiliateId) {
        const tableBody = document.querySelector('#recentOrdersTable tbody');

        try {
            // Get customers
            const customersSnapshot = await db.collection('users')
                .where('Role', '==', '3') // Role 3 for customers
                .where('ReferenceId', '==', affiliateId)
                .get();

            if (customersSnapshot.empty) {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center">No customers found</td></tr>';
                return;
            }

            // Get customer IDs
            const customerIds = customersSnapshot.docs.map(doc => doc.id);
            const orders = [];

            // Get orders from these customers
            if (customerIds.length > 0) {
                // Process in batches (Firestore "in" query limit is 10)
                const batchSize = 10;

                for (let i = 0; i < customerIds.length; i += batchSize) {
                    const batch = customerIds.slice(i, i + batchSize);

                    if (batch.length === 0) continue;

                    const ordersSnapshot = await db.collection('orders')
                        .where('UserId', 'in', batch)
                        .get();

                    // Add to orders array
                    ordersSnapshot.forEach(doc => {
                        const order = doc.data();
                        orders.push({
                            id: doc.id,
                            customerId: order.UserId,
                            createdAt: order.CreatedAt ? order.CreatedAt.toDate() : null,
                            totalAmount: parseFloat(order.TotalAmount || 0),
                            commission: parseFloat(order.Commission || 0),
                            status: order.Status || 'Pending'
                        });
                    });
                }
            }

            if (orders.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center">No orders found</td></tr>';
                return;
            }

            // Sort by date (newest first)
            orders.sort((a, b) => {
                if (!a.createdAt) return 1;
                if (!b.createdAt) return -1;
                return b.createdAt - a.createdAt;
            });

            // Take most recent 5
            const recentOrders = orders.slice(0, 5);

            // Render table
            tableBody.innerHTML = '';

            for (const order of recentOrders) {
                // Get customer name
                let customerName = 'Unknown Customer';
                if (order.customerId) {
                    const customerDoc = customersSnapshot.docs.find(doc => doc.id === order.customerId);
                    if (customerDoc) {
                        const customer = customerDoc.data();
                        customerName = `${customer.FirstName || ''} ${customer.LastName || ''}`.trim() || customer.Email || 'Unknown';
                    }
                }

                // Create status badge
                let statusBadgeClass = 'bg-label-info';
                switch (order.status.toLowerCase()) {
                    case 'completed':
                    case 'delivered':
                        statusBadgeClass = 'bg-label-success';
                        break;
                    case 'processing':
                        statusBadgeClass = 'bg-label-warning';
                        break;
                    case 'cancelled':
                        statusBadgeClass = 'bg-label-danger';
                        break;
                }

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><a href="/Admin/OrderDetails/${order.id}" class="fw-semibold">#${order.id.substring(0, 8)}</a></td>
                    <td>${customerName}</td>
                    <td>${order.createdAt ? formatDate(order.createdAt) : 'Unknown'}</td>
                    <td>${formatCurrency(order.totalAmount)}</td>
                    <td>${formatCurrency(order.commission)}</td>
                    <td><span class="badge ${statusBadgeClass}">${order.status}</span></td>
                `;
                tableBody.appendChild(row);
            }
        } catch (error) {
            console.error('Error loading recent orders:', error);
            tableBody.innerHTML = '<tr><td colspan="6" class="text-center text-danger">Error loading order data</td></tr>';
        }
    }

    async function initPerformanceChart(affiliateId) {
        try {
            // Get last 6 months of data
            const today = new Date();
            const months = 6;
            const labels = [];
            const customersData = Array(months).fill(0);
            const ordersData = Array(months).fill(0);
            const commissionData = Array(months).fill(0);

            // Generate labels for last 6 months
            for (let i = months - 1; i >= 0; i--) {
                const date = new Date(today);
                date.setMonth(date.getMonth() - i);
                labels.push(date.toLocaleString('default', { month: 'short' }));
            }

            // Get customers for this affiliate
            const customersSnapshot = await db.collection('users')
                .where('Role', '==', '3')
                .where('ReferenceId', '==', affiliateId)
                .get();

            // Process customer registrations by month
            customersSnapshot.forEach(doc => {
                const customer = doc.data();
                if (customer.CreatedAt) {
                    const date = customer.CreatedAt.toDate();
                    const monthDiff = getMonthDiff(date, today);

                    if (monthDiff >= 0 && monthDiff < months) {
                        customersData[months - 1 - monthDiff]++;
                    }
                }
            });

            // Get customer IDs
            const customerIds = customersSnapshot.docs.map(doc => doc.id);

            // Get orders from these customers
            if (customerIds.length > 0) {
                // Process in batches (Firestore "in" query limit is 10)
                const batchSize = 10;

                for (let i = 0; i < customerIds.length; i += batchSize) {
                    const batch = customerIds.slice(i, i + batchSize);

                    if (batch.length === 0) continue;

                    const ordersSnapshot = await db.collection('orders')
                        .where('UserId', 'in', batch)
                        .get();

                    // Process orders by month
                    ordersSnapshot.forEach(doc => {
                        const order = doc.data();
                        if (order.CreatedAt) {
                            const date = order.CreatedAt.toDate();
                            const monthDiff = getMonthDiff(date, today);

                            if (monthDiff >= 0 && monthDiff < months) {
                                ordersData[months - 1 - monthDiff]++;
                                commissionData[months - 1 - monthDiff] += parseFloat(order.Commission || 0);
                            }
                        }
                    });
                }
            }

            // Initialize chart
            const chartEl = document.getElementById('affiliatePerformanceChart');
            if (!chartEl) return;

            const chartOptions = {
                series: [
                    {
                        name: 'Customers',
                        type: 'column',
                        data: customersData
                    },
                    {
                        name: 'Orders',
                        type: 'column',
                        data: ordersData
                    },
                    {
                        name: 'Commission',
                        type: 'line',
                        data: commissionData.map(val => parseFloat(val.toFixed(2)))
                    }
                ],
                chart: {
                    height: 300,
                    type: 'line',
                    stacked: false,
                    toolbar: {
                        show: false
                    }
                },
                stroke: {
                    width: [1, 1, 4],
                    curve: 'smooth'
                },
                plotOptions: {
                    bar: {
                        columnWidth: '50%'
                    }
                },
                fill: {
                    opacity: [0.85, 0.85, 1],
                    gradient: {
                        inverseColors: false,
                        shade: 'light',
                        type: 'vertical',
                        opacityFrom: 0.85,
                        opacityTo: 0.55
                    }
                },
                markers: {
                    size: 0
                },
                xaxis: {
                    categories: labels
                },
                yaxis: [
                    {
                        title: {
                            text: 'Count'
                        }
                    },
                    {
                        opposite: true,
                        title: {
                            text: 'Commission ($)'
                        }
                    }
                ],
                tooltip: {
                    shared: true,
                    intersect: false,
                    y: {
                        formatter: function (val, { seriesIndex }) {
                            if (seriesIndex === 2) {
                                return '$' + val.toFixed(2);
                            }
                            return val;
                        }
                    }
                },
                legend: {
                    position: 'top'
                },
                colors: [config.colors.primary, config.colors.info, config.colors.warning]
            };

            performanceChart = new ApexCharts(chartEl, chartOptions);
            performanceChart.render();
        } catch (error) {
            console.error('Error initializing performance chart:', error);
            document.getElementById('affiliatePerformanceChart').innerHTML = 'Error loading chart data';
        }
    }

    function showEditAffiliateModal() {
        if (!affiliate) return;

        // Populate form
        document.getElementById('firstName').value = affiliate.FirstName || '';
        document.getElementById('lastName').value = affiliate.LastName || '';
        document.getElementById('email').value = affiliate.Email || '';
        document.getElementById('phone').value = affiliate.PhoneNumber || '';
        document.getElementById('status').value = affiliate.Status || 'Active';

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('editAffiliateModal'));
        modal.show();
    }

    async function saveAffiliateChanges() {
        try {
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            const status = document.getElementById('status').value;

            if (!firstName || !lastName || !email) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please fill in all required fields',
                    icon: 'error'
                });
                return;
            }

            // Show loading
            Swal.fire({
                title: 'Saving...',
                didOpen: () => {
                    Swal.showLoading();
                },
                allowOutsideClick: false
            });

            // Update affiliate
            await db.collection('users').doc(affiliateId).update({
                FirstName: firstName,
                LastName: lastName,
                Email: email,
                PhoneNumber: phone,
                Status: status,
                UpdatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });

            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('editAffiliateModal')).hide();

            // Show success
            Swal.fire({
                title: 'Success',
                text: 'Affiliate updated successfully',
                icon: 'success'
            });

            // Reload affiliate details
            loadAffiliateDetails(affiliateId);
        } catch (error) {
            console.error('Error updating affiliate:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to update affiliate',
                icon: 'error'
            });
        }
    }

    async function confirmDeleteAffiliate() {
        try {
            // Check for associated customers
            const customersSnapshot = await db.collection('users')
                .where('Role', '==', '3')
                .where('ReferenceId', '==', affiliateId)
                .get();

            const customerCount = customersSnapshot.size;

            // Ask for confirmation
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: customerCount > 0
                    ? `This affiliate has ${customerCount} customer(s). If you delete this affiliate, those customers will not have a reference.`
                    : 'Are you sure you want to delete this affiliate?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it',
                cancelButtonText: 'No, cancel'
            });

            if (result.isConfirmed) {
                // Show loading
                Swal.fire({
                    title: 'Deleting...',
                    didOpen: () => {
                        Swal.showLoading();
                    },
                    allowOutsideClick: false
                });

                // Delete affiliate
                await db.collection('users').doc(affiliateId).delete();

                // Show success
                Swal.fire({
                    title: 'Success',
                    text: 'Affiliate deleted successfully',
                    icon: 'success'
                }).then(() => {
                    // Redirect to affiliates list
                    window.location.href = '/Admin/Affiliates';
                });
            }
        } catch (error) {
            console.error('Error deleting affiliate:', error);
            Swal.fire({
                title: 'Error',
                text: 'Failed to delete affiliate',
                icon: 'error'
            });
        }
    }

    // Utility function to format date
    function formatDate(date) {
        if (!date) return 'N/A';

        const options = { year: 'numeric', month: 'short', day: 'numeric' };
        return date.toLocaleDateString(undefined, options);
    }

    // Utility function to format currency
    function formatCurrency(amount) {
        return '$' + parseFloat(amount).toFixed(2);
    }

    // Utility function to get month difference between two dates
    function getMonthDiff(date1, date2) {
        const yearDiff = date2.getFullYear() - date1.getFullYear();
        const monthDiff = date2.getMonth() - date1.getMonth();
        return (yearDiff * 12) + monthDiff;
    }
</script>
